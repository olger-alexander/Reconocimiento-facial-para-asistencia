import cv2
import numpy as np
import face_recognition as fr
import os
import random
import datetime
import pandas as pd
from openpyxl import load_workbook

# Ruta de la carpeta que contiene las imágenes de los profesores
path = 'data'
images = []
clases = []
rostroscod = []
comp1 = 100

# Horarios de entrada de los profesores (formato 24 horas)
horarios_entrada = {
    'Vega': '07:30',
    'Solorzano': '07:30',
    'llosa': '07:30',
    'Pena': '07:30',
    'Maceda': '07:30'
}

# Recorrer todas las subcarpetas en 'data'
for subdir in os.listdir(path):
    subdir_path = os.path.join(path, subdir)
    if os.path.isdir(subdir_path):
        print(f"Procesando carpeta: {subdir}")
        for filename in os.listdir(subdir_path):
            img_path = os.path.join(subdir_path, filename)
            print(f"Cargando imagen: {img_path}")
            imgdb = cv2.imread(img_path)
            if imgdb is None:
                print(f"Error: No se pudo cargar la imagen en {img_path}")
                continue
            imgdb = cv2.cvtColor(imgdb, cv2.COLOR_BGR2RGB)
            face_encodings = fr.face_encodings(imgdb)
            if len(face_encodings) > 0:
                rostroscod.append(face_encodings[0])
                clases.append(subdir)
            else:
                print(f"No se encontraron rostros en la imagen: {img_path}")

print(f"Clases detectadas: {clases}")

# Iniciar la captura de video
cap = cv2.VideoCapture(0)

# Obtener la fecha actual y formar el nombre del archivo Excel
fecha_actual = datetime.datetime.now().strftime("%Y-%m-%d")
archivo_excel = f'registro_asistencia_{fecha_actual}.xlsx'

# Leer registros existentes del archivo Excel si existe
try:
    df_existente = pd.read_excel(archivo_excel)
    existentes = set(df_existente['Nombre'])
except FileNotFoundError:
    df_existente = pd.DataFrame()
    existentes = set()

# Lista para almacenar los registros de entrada
registros = []

# Umbral personalizado para comparación de rostros
umbral = 0.43333

while True:
    ret, frame = cap.read()
    if not ret:
        print("No se pudo capturar la imagen de la cámara.")
        continue

    frame2 = cv2.resize(frame, (0, 0), None, 0.25, 0.25)
    rgb = cv2.cvtColor(frame2, cv2.COLOR_BGR2RGB)
    faces = fr.face_locations(rgb)
    facescod = fr.face_encodings(rgb, faces)

    for facecod, faceloc in zip(facescod, faces):
        comparacion = fr.compare_faces(rostroscod, facecod, tolerance=umbral)
        simi = fr.face_distance(rostroscod, facecod)
        
        if simi.size == 0:
            print("No hay distancias de similitud disponibles.")
            continue

        min_index = np.argmin(simi)

        if comparacion[min_index] and simi[min_index] < umbral:
            nombre = clases[min_index]
            hora_actual = datetime.datetime.now().strftime("%H:%M")

            if nombre not in existentes:
                if nombre in horarios_entrada:
                    horario_entrada = horarios_entrada[nombre]

                    if hora_actual <= horario_entrada:
                        puntualidad = "Puntual"
                    else:
                        puntualidad = "Tardanza"

                    print(f"{nombre.upper()} - {hora_actual} - {puntualidad}")
                    registros.append([nombre, hora_actual, puntualidad])
                    existentes.add(nombre)
                else:
                    print(f"El nombre {nombre} no está en el diccionario de horarios de entrada.")
            
            yi, xf, yf, xi = faceloc
            yi, xf, yf, xi = yi * 4, xf * 4, yf * 4, xi * 4
            indice = comparacion.index(True)

            if comp1 != indice:
                r = random.randrange(0, 255, 50)
                g = random.randrange(0, 255, 50)
                b = random.randrange(0, 255, 50)
                comp1 = indice

            if comp1 == indice:
                cv2.rectangle(frame, (xi, yi), (xf, yf), (r, g, b), 3)
                cv2.rectangle(frame, (xi, yf - 35), (xf, yf), (r, g, b), cv2.FILLED)
                cv2.putText(frame, nombre.upper(), (xi + 6, yf - 6), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        else:
            print("No se detectó una coincidencia suficientemente cercana")

    cv2.imshow("reconocimiento facial", frame)
    t = cv2.waitKey(5)
    if t == 27:  # Si se presiona la tecla 'Esc'
        break

# Liberar la captura de video y destruir todas las ventanas
cap.release()
cv2.destroyAllWindows()

# Convertir la lista de registros a un DataFrame de pandas
df_nuevos = pd.DataFrame(registros, columns=['Nombre', 'Hora de Ingreso', 'Estado'])

# Guardar o actualizar el archivo Excel
if not df_nuevos.empty:
    try:
        # Cargar el archivo Excel existente
        libro = load_workbook(archivo_excel)
        hoja = libro.active

        # Añadir los nuevos registros al final del archivo Excel
        for index, row in df_nuevos.iterrows():
            hoja.append(row.tolist())

        # Guardar los cambios en el archivo Excel
        libro.save(archivo_excel)
        print(f"Registros guardados en {archivo_excel}")

    except FileNotFoundError:
        # Si el archivo no existe, crear uno nuevo
        df_nuevos.to_excel(archivo_excel, index=False)
        print(f"Se creó un nuevo archivo Excel: {archivo_excel}")
else:
    print("No hay nuevos registros para guardar.")
